# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  heroku: circleci/heroku@0.0.8
workflows:
  heroku_deploy:
    jobs:
      - build:
          filters:
            branches:
              only: master, dev
      - deploy:
          requires:
            - build
jobs:
  deploy:
    executor: heroku/default # Uses the basic buildpack-deps image, which has the prerequisites for installing heroku's CLI.
    steps:
      - checkout
      - heroku/install # Runs the heroku install command, if necessary.
      - heroku/deploy-via-git: # Deploys branch to Heroku via git push.
          # only-branch: master # If you specify an only-branch, the deploy will not oc

  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:lts

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory
      # - run:
          # name: update-npm
          # command: 'sudo npm install -g npm@latest'
      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-packages
          command: yarn install
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: #run eslint check
          name: eslint
          command: |
            mkdir ./reports
            yarn eslint --ext .js,.jsx,.ts,.tsx ./src/ -f junit -o ./reports/eslint.xml
          when: always
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports
      - run: # run tests
          name: test
          command: yarn test -i --ci
      - run: # run coverage report
          name: code-coverage
          command: yarn test -i --ci --coverage
      - store_artifacts: # special step to save test results as as artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: test-results.xml
          prefix: tests
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: coverage
          prefix: coverage
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: ./coverage/lcov.info
          prefix: tests
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
